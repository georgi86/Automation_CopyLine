///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;

namespace CopyLine
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Recording1 recording.
    /// </summary>
    [TestModule("59c86ce6-eced-40d8-963e-10eb37797692", ModuleType.Recording, 1)]
    public partial class Recording1 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the CopyLineRepository repository.
        /// </summary>
        public static CopyLineRepository repo = CopyLineRepository.Instance;

        static Recording1 instance = new Recording1();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Recording1()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Recording1 Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "7.0")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "7.0")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 500;
            Keyboard.DefaultKeyPressTime = 300;
            Delay.SpeedFactor = 2.00;

            Init();

            Report.Log(ReportLevel.Info, "Application", "Run application 'C:\\QVI\\MeasureX\\MX.bat' with arguments '' in normal mode.", new RecordItemIndex(0));
            Host.Local.RunApplication("C:\\QVI\\MeasureX\\MX.bat", "", "C:\\QVI\\MeasureX", false);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MeasureXUntitled.MeasureXUntitled' at Center.", repo.MeasureXUntitled.MeasureXUntitledInfo, new RecordItemIndex(1));
            repo.MeasureXUntitled.MeasureXUntitled.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LMenu}'.", new RecordItemIndex(2));
            Keyboard.Press("{LMenu}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'f'.", new RecordItemIndex(3));
            Keyboard.Press("f");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'o'.", new RecordItemIndex(4));
            Keyboard.Press("o");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Delete}'.", new RecordItemIndex(5));
            Keyboard.Press("{Delete}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'D:\\Joro\\GIT_Automation_MX\\Line\\CopyLine.mxi'.", new RecordItemIndex(6));
            Keyboard.Press("D:\\Joro\\GIT_Automation_MX\\Line\\CopyLine.mxi");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(7));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MeasureXUntitled.MeasureXUntitled' at Center.", repo.MeasureXUntitled.MeasureXUntitledInfo, new RecordItemIndex(8));
            repo.MeasureXUntitled.MeasureXUntitled.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LMenu}'.", new RecordItemIndex(9));
            Keyboard.Press("{LMenu}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'f'.", new RecordItemIndex(10));
            Keyboard.Press("f");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'r'.", new RecordItemIndex(11));
            Keyboard.Press("r");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(12));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Inspection.AfterRunButtonOK' at Center.", repo.Inspection.AfterRunButtonOKInfo, new RecordItemIndex(13));
            repo.Inspection.AfterRunButtonOK.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MeasureXUntitled.MeasureXUntitled' at Center.", repo.MeasureXUntitled.MeasureXUntitledInfo, new RecordItemIndex(14));
            repo.MeasureXUntitled.MeasureXUntitled.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LMenu}'.", new RecordItemIndex(15));
            Keyboard.Press("{LMenu}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'f'.", new RecordItemIndex(16));
            Keyboard.Press("f");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'n'.", new RecordItemIndex(17));
            Keyboard.Press("n");
            Delay.Milliseconds(0);


            Report.Log(ReportLevel.Info, "Application", "Closing application containing item 'MeasureXUntitled'.", repo.MeasureXUntitled.SelfInfo, new RecordItemIndex(18));
            Host.Current.CloseApplication(repo.MeasureXUntitled.Self, new Duration(100));
            //Delay.Milliseconds(0);

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(19));
            Delay.Duration(5000, false);



            string strActualValues = "D:\\Joro\\GIT_Automation_MX\\ActualValues.STA";
            string strHardcodedValues= "D:\\Joro\\GIT_Automation_MX\\HardcodedValues.STA";  
            
          
            string[] readActualLines = File.ReadAllLines(strActualValues);
            string[] readHardcodedLines = File.ReadAllLines(strHardcodedValues);
                   
            

            int iResultsLines = readHardcodedLines.Length;

            bool bResultsOK = true;

            for (int i = 0; i < iResultsLines; i++)
            {
                bool bResultsLineAreSame = readHardcodedLines[i].Equals(readActualLines[i]);
                
                if (!bResultsLineAreSame)
                {
                    Ranorex.Report.Error("Actual result is", readActualLines[i]);
                    Ranorex.Report.Error("", "The line has wrong value. It should be:");
                    Ranorex.Report.Error("Expected result is ", readHardcodedLines[i]);

                    bResultsOK = false;

                }

            }  // for (int i = 0; i < iLines; i++)

            if (bResultsOK)
            {
                {
                    Ranorex.Report.Success("The test was sucessfully performed");
                }
            }

            Delay.Milliseconds(100);



            //Report.Log(ReportLevel.Info, "Application", "Run application 'yourapp' with arguments '' in normal mode.", new RecordItemIndex(20));
            //Host.Local.RunApplication("yourapp", "", "", false);
            //Delay.Milliseconds(0);

        }

        #region Image Feature Data
        #endregion
    }
#pragma warning restore 0436
}
